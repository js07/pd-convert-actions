// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Converts legacy code step to component 1`] = `
"import { axios } from "@pipedream/platform";

export default {
  props: {
    trello: {
      type: "app",
      app: "trello",
    },
    db: "data_store",
    myRequiredField: {
      type: "string",
      description: "A required field",
    },
    myOptionalField: {
      type: "string",
      description: "An optional field",
      optional: true,
    },
  },
  async run({ steps, $ }) {
    let someexport;
    let $checkpoint = await this.db.get("$checkpoint");
    let stepCheckpoint = await this.db.get("scp_abc123");
    
    try {
    
      // conversion should use data_store prop to get and set the export at the top
      // and bottom of the run method
      someexport = [];
      someexport.push("asdf");
    
      // $attachments -> step.trigger.context.attachments
      fs.readFileSync(steps.trigger.context.attachments["test4.csv"]).toString();
    
      // should become \`const eventData = steps.trigger.event.data\`
      const eventData = steps.trigger.event.data;
      console.log(eventData);
    
      // conversion should use data_store prop to get and set the checkpoint, with a
      // (mock) unique id for the step, at the top and bottom of the run method
      stepCheckpoint ||= {};
      stepCheckpoint["foo"] = 5;
    
      // conversion should use data_store prop to get and set the checkpoint at the
      // top and bottom of the run method
      $checkpoint ||= {};
      $checkpoint["foo"] = 6;
    
      // conversion should have a "myRequiredField" prop
      console.log(this.myRequiredField);
      // conversion should have a "myOptionalField" prop with optional: true
      console.log(this.myOptionalField);
    
      // should become \`return await axios($, {\` when converting to ESM
      return await axios($, {
        url: \`https://api.trello.com/1/cards/\`+ steps.nodejs.$return_value,
      }, {
        token: {
        // should convert \`auths.trello\` to \`this.trello.$auth\`
          key: this.trello.$auth.oauth_access_token,
          secret: this.trello.$auth.oauth_refresh_token,
        },
        oauthSignerUri: this.trello.$auth.oauth_signer_uri,
      });
    
    } finally {
      await this.db.set("scp_abc123", stepCheckpoint);
      await this.db.set("$checkpoint", $checkpoint);
      $.export("someexport", someexport);
    }
  }
};"
`;

exports[`Converts published legacy action to component action 1`] = `
"// legacy_hash_id: a_2wim5R
import { axios } from "@pipedream/platform";

export default {
  key: "segment-track",
  name: "Track actions your users perform",
  description: "Track lets you record the actions your users perform (note requires userId or anonymousId)",
  version: "0.3.1",
  type: "action",
  props: {
    segment: {
      type: "app",
      app: "segment",
    },
    anonymousId: {
      type: "string",
      description: "A pseudo-unique substitute for a User ID, for cases when you don't have an absolutely unique identifier. A userId or an anonymousId is required.",
      optional: true,
    },
    context: {
      type: "object",
      description: "Dictionary of extra information that provides useful context about a message, but is not directly related to the API call like ip address or locale",
      optional: true,
    },
    event: {
      type: "string",
      description: "Name of the action that a user has performed.",
    },
    integrations: {
      type: "object",
      description: "Dictionary of destinations to either enable or disable",
      optional: true,
    },
    properties: {
      type: "object",
      description: "Free-form dictionary of properties of the event, like revenue",
      optional: true,
    },
    timestamp: {
      type: "string",
      description: "ISO-8601 date string",
      optional: true,
    },
    userId: {
      type: "string",
      description: "Unique identifier for the user in your database. A userId or an anonymousId is required.",
      optional: true,
    },
  },
  async run({ $ }) {
    return await axios($, {
      method: "post",
      url: "https://api.segment.io/v1/track",
      auth: {
        username: this.segment.$auth.write_key,
      },
      data: {
        anonymousId: this.anonymousId,
        context: this.context,
        event: this.event,
        integrations: this.integrations,
        properties: this.properties,
        timestamp: this.timestamp,
        userId: this.userId,
      },
    });
  },
};
"
`;
